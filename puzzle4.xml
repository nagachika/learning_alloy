<alloy builddate="2012-02-28 12:31 EST">

<instance bitwidth="0" maxseq="0" command="Run run$1 for 5 is_liar, 5 is_coward" filename="/Users/nishio/cur/learning_alloy/make_puzzle3.als">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/A" ID="4" parentID="5" one="yes">
   <atom label="A$0"/>
</sig>

<sig label="this/B" ID="6" parentID="5" one="yes">
   <atom label="B$0"/>
</sig>

<sig label="this/C" ID="7" parentID="5" one="yes">
   <atom label="C$0"/>
</sig>

<sig label="this/D" ID="8" parentID="5" one="yes">
   <atom label="D$0"/>
</sig>

<sig label="this/E" ID="9" parentID="5" one="yes">
   <atom label="E$0"/>
</sig>

<sig label="this/Person" ID="5" parentID="2" abstract="yes" enum="yes">
</sig>

<sig label="this/T" ID="10" parentID="11" one="yes">
   <atom label="T$0"/>
</sig>

<sig label="this/F" ID="12" parentID="11" one="yes">
   <atom label="F$0"/>
</sig>

<sig label="this/Bool" ID="11" parentID="2" abstract="yes" enum="yes">
</sig>

<sig label="this/TT" ID="13" parentID="14" one="yes">
   <atom label="TT$0"/>
</sig>

<sig label="this/TF" ID="15" parentID="14" one="yes">
   <atom label="TF$0"/>
</sig>

<sig label="this/FT" ID="16" parentID="14" one="yes">
   <atom label="FT$0"/>
</sig>

<sig label="this/FF" ID="17" parentID="14" one="yes">
   <atom label="FF$0"/>
</sig>

<sig label="this/BoolBool" ID="14" parentID="2" abstract="yes" enum="yes">
</sig>

<sig label="this/is_liar" ID="18" parentID="19">
   <atom label="is_liar$0"/>
   <atom label="is_liar$1"/>
   <atom label="is_liar$2"/>
   <atom label="is_liar$3"/>
   <atom label="is_liar$4"/>
</sig>

<sig label="this/is_coward" ID="20" parentID="19">
   <atom label="is_coward$0"/>
   <atom label="is_coward$1"/>
   <atom label="is_coward$2"/>
   <atom label="is_coward$3"/>
   <atom label="is_coward$4"/>
</sig>

<sig label="this/Constrain" ID="19" parentID="2" abstract="yes">
</sig>

<field label="by" ID="21" parentID="19">
   <tuple> <atom label="is_liar$0"/> <atom label="E$0"/> </tuple>
   <tuple> <atom label="is_liar$1"/> <atom label="D$0"/> </tuple>
   <tuple> <atom label="is_liar$2"/> <atom label="C$0"/> </tuple>
   <tuple> <atom label="is_liar$3"/> <atom label="B$0"/> </tuple>
   <tuple> <atom label="is_liar$4"/> <atom label="A$0"/> </tuple>
   <tuple> <atom label="is_coward$0"/> <atom label="E$0"/> </tuple>
   <tuple> <atom label="is_coward$1"/> <atom label="D$0"/> </tuple>
   <tuple> <atom label="is_coward$2"/> <atom label="C$0"/> </tuple>
   <tuple> <atom label="is_coward$3"/> <atom label="B$0"/> </tuple>
   <tuple> <atom label="is_coward$4"/> <atom label="A$0"/> </tuple>
   <types> <type ID="19"/> <type ID="5"/> </types>
</field>

<field label="who" ID="22" parentID="19">
   <tuple> <atom label="is_liar$0"/> <atom label="B$0"/> </tuple>
   <tuple> <atom label="is_liar$1"/> <atom label="E$0"/> </tuple>
   <tuple> <atom label="is_liar$2"/> <atom label="A$0"/> </tuple>
   <tuple> <atom label="is_liar$3"/> <atom label="C$0"/> </tuple>
   <tuple> <atom label="is_liar$4"/> <atom label="D$0"/> </tuple>
   <tuple> <atom label="is_coward$0"/> <atom label="D$0"/> </tuple>
   <tuple> <atom label="is_coward$1"/> <atom label="E$0"/> </tuple>
   <tuple> <atom label="is_coward$2"/> <atom label="B$0"/> </tuple>
   <tuple> <atom label="is_coward$3"/> <atom label="A$0"/> </tuple>
   <tuple> <atom label="is_coward$4"/> <atom label="C$0"/> </tuple>
   <types> <type ID="19"/> <type ID="5"/> </types>
</field>

<sig label="ordering/Ord" ID="23" parentID="2" one="yes" private="yes">
   <atom label="ordering/Ord$0"/>
</sig>

<field label="First" ID="24" parentID="23" private="yes">
   <tuple> <atom label="ordering/Ord$0"/> <atom label="A$0"/> </tuple>
   <types> <type ID="23"/> <type ID="5"/> </types>
</field>

<field label="Next" ID="25" parentID="23" private="yes">
   <tuple> <atom label="ordering/Ord$0"/> <atom label="A$0"/> <atom label="B$0"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="B$0"/> <atom label="C$0"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="C$0"/> <atom label="D$0"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="D$0"/> <atom label="E$0"/> </tuple>
   <types> <type ID="23"/> <type ID="5"/> <type ID="5"/> </types>
</field>

<sig label="open$3/Ord" ID="26" parentID="2" one="yes" private="yes">
   <atom label="open$3/Ord$0"/>
</sig>

<field label="First" ID="27" parentID="26" private="yes">
   <tuple> <atom label="open$3/Ord$0"/> <atom label="T$0"/> </tuple>
   <types> <type ID="26"/> <type ID="11"/> </types>
</field>

<field label="Next" ID="28" parentID="26" private="yes">
   <tuple> <atom label="open$3/Ord$0"/> <atom label="T$0"/> <atom label="F$0"/> </tuple>
   <types> <type ID="26"/> <type ID="11"/> <type ID="11"/> </types>
</field>

<sig label="open$4/Ord" ID="29" parentID="2" one="yes" private="yes">
   <atom label="open$4/Ord$0"/>
</sig>

<field label="First" ID="30" parentID="29" private="yes">
   <tuple> <atom label="open$4/Ord$0"/> <atom label="TT$0"/> </tuple>
   <types> <type ID="29"/> <type ID="14"/> </types>
</field>

<field label="Next" ID="31" parentID="29" private="yes">
   <tuple> <atom label="open$4/Ord$0"/> <atom label="TT$0"/> <atom label="TF$0"/> </tuple>
   <tuple> <atom label="open$4/Ord$0"/> <atom label="TF$0"/> <atom label="FT$0"/> </tuple>
   <tuple> <atom label="open$4/Ord$0"/> <atom label="FT$0"/> <atom label="FF$0"/> </tuple>
   <types> <type ID="29"/> <type ID="14"/> <type ID="14"/> </types>
</field>

<sig label="univ" ID="2" builtin="yes">
</sig>

</instance>

<source filename="/Users/nishio/cur/learning_alloy/make_puzzle3.als" content="&#x000a;enum Person {A, B, C, D, E}&#x000a;&#x000a;enum Bool {T, F}&#x000a;enum BoolBool {TT, TF, FT, FF}&#x000a;&#x000a;abstract sig Constrain{&#x000a;&#x0009;by: one Person,&#x000a;&#x0009;who: one Person&#x000a;}{&#x000a;&#x0009;by not in who&#x000a;}&#x000a;&#x000a;sig is_liar extends Constrain {}&#x000a;sig is_coward extends Constrain {}&#x000a;&#x000a;pred satisfy(cs: Constrain, a, b, c, d, e: BoolBool){&#x000a;  let&#x000a;&#x0009;&#x0009;bb = (A -&gt; a) + (B -&gt; b) + (C -&gt; c) + (D -&gt; d) + (E -&gt; e),&#x000a;&#x0009;&#x0009;b0 = bb.(TT -&gt; T + TF -&gt; T + FT -&gt; F + FF -&gt; F),&#x000a;  &#x0009;b1 = bb.(TT -&gt; T + TF -&gt; F + FT -&gt; T + FF -&gt; F)&#x000a;  {&#x000a;&#x0009;&#x0009;// b0: Person -&gt; Bool // &#x6b63;&#x76f4;T &#x5618;&#x3064;&#x304d;F&#x000a;&#x0009;&#x0009;// b1: Person -&gt; Bool // &#x81c6;&#x75c5;T &#x000a;&#x0009;&#x0009;// &#x5618;&#x3064;&#x304d;&#x306e;&#x4eba;&#x6570;&#x3092;&#x6307;&#x5b9a;&#x000a;&#x0009;&#x0009;#{b0.T} = 3&#x000a;&#x0009;&#x0009;// &#x5c0f;&#x5fc3;&#x8005;&#x306e;&#x4eba;&#x6570;&#x3092;&#x6307;&#x5b9a;&#x000a;&#x0009;&#x0009;#{b1.T} = 3&#x000a;&#x0009;&#x0009;// &#x3059;&#x3079;&#x3066;&#x306e;&#x5618;&#x3064;&#x304d;&#x767a;&#x8a00;&#x306b;&#x3064;&#x3044;&#x3066;&#x3001;&#x000a;&#x0009;&#x0009;// &#x767a;&#x8a00;&#x8005;&#x304c;&#x5618;&#x3064;&#x304d;&#x3067;&#x306a;&#x3044;&#x306a;&#x3089;&#x5bfe;&#x8c61;&#x306f;&#x5618;&#x3064;&#x304d;&#x000a;&#x0009;&#x0009;all c: cs &amp; is_liar{&#x000a;&#x0009;&#x0009;&#x0009;(c.by.b0 = F) =&gt; (c.who.b0 = T)&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;// &#x3059;&#x3079;&#x3066;&#x306e;&#x5c0f;&#x5fc3;&#x8005;&#x767a;&#x8a00;&#x306b;&#x3064;&#x3044;&#x3066;&#x3001;&#x000a;&#x0009;&#x0009;// &#x767a;&#x8a00;&#x8005;&#x304c;&#x5618;&#x3064;&#x304d;&#x3067;&#x306a;&#x3044;&#x306a;&#x3089;&#x5bfe;&#x8c61;&#x306f;&#x81c6;&#x75c5;&#x000a;&#x0009;&#x0009;all c: cs &amp; is_coward{&#x000a;&#x0009;&#x0009;&#x0009;(c.by.b0 = F) =&gt; (c.who.b1 = T)&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;// &#x3059;&#x3079;&#x3066;&#x306e;&#x5c0f;&#x5fc3;&#x306a;&#x5618;&#x3064;&#x304d;&#x306b;&#x3064;&#x3044;&#x3066;&#x000a;&#x0009;&#x0009;all p: b0.T &amp; b1.T {&#x000a;&#x0009;&#x0009;&#x0009;// &#x4e00;&#x3064;&#x3057;&#x304b;&#x5618;&#x3092;&#x3064;&#x304b;&#x306a;&#x3044;:&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;#{c: by.p | &#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(c in is_liar and c.who.b0 = F) or&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(c in is_coward and c.who.b1 = F)&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;} = 1&#x000a;&#x0009;&#x0009;}&#x000a;  }&#x000a;}&#x000a;&#x000a;&#x000a;run {&#x000a;&#x0009;all p: Person {#(by.p) &gt; 1}&#x000a;  let answers = {&#x000a;    a, b, c, d, e: BoolBool |&#x000a;    satisfy[Constrain, a, b, c, d, e]}&#x000a;    {&#x000a;&#x000a;    one answers&#x000a;    all x: Constrain {&#x000a;      not one {&#x000a;        a, b, c, d, e: BoolBool |&#x000a;        satisfy[Constrain - x, a, b, c, d, e]&#x000a;      }&#x000a;    }&#x000a;  }&#x000a;} for 5 is_liar, 5 is_coward"/>

<source filename="/$alloy4$/models/util/integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic.&#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;// Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a;// 1) if a is 0, then it returns 0&#x000a;// 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a;// 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;// answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot;&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/* negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/* equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/* greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/* less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/* greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/* less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/* integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/* positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/* negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/* non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/* non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/* signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/*&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/*&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;// returns the largest integer in the current bitwidth&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;// returns the smallest integer in the current bitwidth&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;// maps each integer (except max) to the integer after it&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;// maps each integer (except min) to the integer before it&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;// given a set of integers, return the largest element&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;// given a set of integers, return the smallest element&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;// given an integer, return all integers prior to it&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;// given an integer, return all integers following it&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;// returns the larger of the two integers&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;// returns the smaller of the two integers&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

<source filename="/$alloy4$/models/util/ordering.als" content="module util/ordering[exactly elem]&#x000a;&#x000a;/*&#x000a; * Creates a single linear ordering over the atoms in elem. It also constrains all&#x000a; * the atoms to exist that are permitted by the scope on elem. That is, if the scope&#x000a; * on a signature S is 5, opening util/ordering[S] will force S to have 5 elements&#x000a; * and create a linear ordering over those five elements. The predicates and&#x000a; * functions below provide access to properties of the linear ordering, such as&#x000a; * which element is first in the ordering, or whether a given element precedes&#x000a; * another. You cannotcreate multiple linear orderings over the same signature with&#x000a; * this model. If you that functionality, try using the util/sequence module instead.&#x000a; *&#x000a; * Technical comment:&#x000a; * An important constraint: elem must contain all atoms permitted by the scope.&#x000a; * This is to let the analyzer optimize the analysis by setting all fields of each&#x000a; * instantiation of Ord to predefined values: e.g. by setting &apos;last&apos; to the highest&#x000a; * atom of elem and by setting &apos;next&apos; to {&lt;T0,T1&gt;,&lt;T1,T2&gt;,...&lt;Tn-1,Tn&gt;}, where n is&#x000a; * the scope of elem. Without this constraint, it might not be true that Ord.last is&#x000a; * a subset of elem, and that the domain and range of Ord.next lie inside elem.&#x000a; *&#x000a; * author: Ilya Shlyakhter&#x000a; * revisions: Daniel jackson&#x000a; */&#x000a;&#x000a;private one sig Ord {&#x000a;   First: set elem,&#x000a;   Next: elem -&gt; elem&#x000a;} {&#x000a;   pred/totalOrder[elem,First,Next]&#x000a;}&#x000a;&#x000a;// first&#x000a;fun first: one elem { Ord.First }&#x000a;&#x000a;// last&#x000a;fun last: one elem { elem - (next.elem) }&#x000a;&#x000a;// return a mapping from each element to its predecessor&#x000a;fun prev : elem-&gt;elem { ~(Ord.Next) }&#x000a;&#x000a;// return a mapping from each element to its successor&#x000a;fun next : elem-&gt;elem { Ord.Next }&#x000a;&#x000a;// return elements prior to e in the ordering&#x000a;fun prevs [e: elem]: set elem { e.^(~(Ord.Next)) }&#x000a;&#x000a;// return elements following e in the ordering&#x000a;fun nexts [e: elem]: set elem { e.^(Ord.Next) }&#x000a;&#x000a;// e1 is less than e2 in the ordering&#x000a;pred lt [e1, e2: elem] { e1 in prevs[e2] }&#x000a;&#x000a;// e1 is greater than e2 in the ordering&#x000a;pred gt [e1, e2: elem] { e1 in nexts[e2] }&#x000a;&#x000a;// e1 is less than or equal to e2 in the ordering&#x000a;pred lte [e1, e2: elem] { e1=e2 || lt [e1,e2] }&#x000a;&#x000a;// e1 is greater than or equal to e2 in the ordering&#x000a;pred gte [e1, e2: elem] { e1=e2 || gt [e1,e2] }&#x000a;&#x000a;// returns the larger of the two elements in the ordering&#x000a;fun larger [e1, e2: elem]: elem { lt[e1,e2] =&gt; e2 else e1 }&#x000a;&#x000a;// returns the smaller of the two elements in the ordering&#x000a;fun smaller [e1, e2: elem]: elem { lt[e1,e2] =&gt; e1 else e2 }&#x000a;&#x000a;// returns the largest element in es&#x000a;// or the empty set if es is empty&#x000a;fun max [es: set elem]: lone elem { es - es.^(~(Ord.Next)) }&#x000a;&#x000a;// returns the smallest element in es&#x000a;// or the empty set if es is empty&#x000a;fun min [es: set elem]: lone elem { es - es.^(Ord.Next) }&#x000a;&#x000a;assert correct {&#x000a;  let mynext = Ord.Next |&#x000a;  let myprev = ~mynext | {&#x000a;     ( all b:elem | (lone b.next) &amp;&amp; (lone b.prev) &amp;&amp; (b !in b.^mynext) )&#x000a;     ( (no first.prev) &amp;&amp; (no last.next) )&#x000a;     ( all b:elem | (b!=first &amp;&amp; b!=last) =&gt; (one b.prev &amp;&amp; one b.next) )&#x000a;     ( !one elem =&gt; (one first &amp;&amp; one last &amp;&amp; first!=last &amp;&amp; one first.next &amp;&amp; one last.prev) )&#x000a;     ( one elem =&gt; (first=elem &amp;&amp; last=elem &amp;&amp; no myprev &amp;&amp; no mynext) )&#x000a;     ( myprev=~mynext )&#x000a;     ( elem = first.*mynext )&#x000a;     (all disj a,b:elem | a in b.^mynext or a in b.^myprev)&#x000a;     (no disj a,b:elem | a in b.^mynext and a in b.^myprev)&#x000a;     (all disj a,b,c:elem | (b in a.^mynext and c in b.^mynext) =&gt;(c in a.^mynext))&#x000a;     (all disj a,b,c:elem | (b in a.^myprev and c in b.^myprev) =&gt;(c in a.^myprev))&#x000a;  }&#x000a;}&#x000a;run {} for exactly 0 elem expect 0&#x000a;run {} for exactly 1 elem expect 1&#x000a;run {} for exactly 2 elem expect 1&#x000a;run {} for exactly 3 elem expect 1&#x000a;run {} for exactly 4 elem expect 1&#x000a;check correct for exactly 0 elem&#x000a;check correct for exactly 1 elem&#x000a;check correct for exactly 2 elem&#x000a;check correct for exactly 3 elem&#x000a;check correct for exactly 4 elem&#x000a;check correct for exactly 5 elem&#x000a;"/>

</alloy>
